
impl<K, V> ArgLocator<K, V>
where
    K: From<ArgAlias> + Ord,
    V: AsRef<clap::Arg>,
{
    pub fn from_args(args: impl Iterator<Item = clap::Arg>) -> Self {
        Self {
            arg_aliases: OnceCell::new(),
            arg_aliases_initialiser: Box::new(|| {
                let mut aliases = BTreeMap::new();
                for arg in args {
                    let rc = Rc::new(arg.to_owned());
                    if let Some(all_aliases) = arg.get_all_aliases() {
                        for alias in all_aliases.into_iter().chain(arg.get_long()) {
                            aliases.insert(ArgAlias::Long(alias.to_string()).into(), Rc::clone(&rc));
                        }
                    }
                    if let Some(short_aliases) = arg.get_all_short_aliases() {
                        for alias in short_aliases.into_iter().chain(arg.get_short()) {
                            aliases.insert(ArgAlias::Short(alias).into(), Rc::clone(&rc));
                        }
                    }
                }

                aliases
            }),
            fallback_arg: None
        }
    }
